{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/page-types/common.ts"],"names":[],"mappings":"AAkDA,MAAM,UAAU,SAAS,CAAmC,MAAW,EAAE,GAAM;IAC7E,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QACnD,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC9B,MAAM,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC;YAC/B,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAsB,CAAC;SACjH;KACF;IACD,OAAO,GAAwB,CAAC;AAClC,CAAC","sourcesContent":["import { Params } from \"@remix-run/router\";\nimport { ExtendedPathWithParams } from \"../services\";\n\nexport type WithChildren<Target extends {}, Children extends {}> = Target & {\n  [key in keyof Children]: Children[key];\n};\n\nexport interface HasId<T extends string = string> {\n  id: T;\n}\n\nexport interface HasChildren<T extends {}> {\n  get children(): T[];\n}\n\nexport interface RepresentsRoutes<T> {\n  getRoutes(): T[];\n}\n\nexport type GetId<Obj extends HasId> = Obj extends { id: infer X } ? X : never;\n\nexport type AddChild<Target extends {}, V extends HasId> = WithChildren<Target, { [key in UniqueKey<Target, GetId<V>>]: V }>;\n\nexport interface Page {\n  path: string;\n  hasParams: false;\n}\n\nexport type WithParams<T extends string> = {\n  paramKeys: readonly T[];\n};\n\nexport interface PageWithParams<T extends string> extends WithParams<T> {\n  path: string;\n  hasParams: true;\n}\n\ntype IsEmptyKey<K extends string> = '' extends K ? true : false;\ntype KeyExists<Obj, K extends string> = K extends keyof Obj ? true : false;\ntype KeyWithZeroExists<Obj, K extends string> = `${K}_0` extends keyof Obj ? true : false;\n\ntype UniqueKey<Obj extends {}, K extends string> =\n  IsEmptyKey<K> extends true\n    ? K\n    : KeyExists<Obj, K> extends true\n      ? KeyWithZeroExists<Obj, K> extends true\n        ? UniqueKey<Obj, `${K}_0`>\n        : `${K}_0`\n      : K;\n\nexport function uniqueKey<Obj extends {}, K extends string>(target: Obj, key: K): UniqueKey<Obj, K> {\n  if (key && key.length && typeof target === 'object') {\n    if (target.hasOwnProperty(key)) {\n      const extendedKey = `${key}_0`;\n      return (target.hasOwnProperty(extendedKey) ? uniqueKey(target, extendedKey) : extendedKey) as UniqueKey<Obj, K>;\n    }\n  }\n  return key as UniqueKey<Obj, K>;\n}\n\nexport type InjectParamsIfNeeded<T, Base extends object> = T extends (PageWithParams<infer U> | ExtendedPathWithParams<infer U>)\n  ? Base & { params: Params<U> }\n  : Base & { params?: Params };\n"]}