{"version":3,"file":"useThrottledContext.js","sourceRoot":"","sources":["../../src/hooks/useThrottledContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjE,OAAO,EAAE,sBAAsB,EAAE,MAAM,oCAAoC,CAAC;AAC5E,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,MAAM,UAAU,mBAAmB,CAAI,OAAmB;IACxD,MAAM,YAAY,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IACzC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;IACxC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAI,YAAY,CAAC,CAAC;IAC5D,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAI,YAAY,CAAC,CAAC;IAEtE,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAC/C,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;KAC7B;IAED,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CACpC,WAAW,EACX,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE;YAC3B,iBAAiB,CAAC,aAAa,CAAC,CAAC;YACjC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC1B,CAAC,CACF,CAAC;QAEF,OAAO,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;IAC7B,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,SAAS,CAAC,GAAG,EAAE;QACb,sBAAsB,CAAC,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACzE,CAAC,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC;IAEhC,OAAO,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import { Context, useContext, useEffect, useState } from 'react';\nimport { ContextThrottleService } from '../services/ContextThrottleService';\nimport { EventBus } from '../services/EventBus';\n\nexport function useThrottledContext<T>(context: Context<T>): [T, T | null] {\n  const contextValue = useContext(context);\n  const contextName = context.displayName;\n  const [prevValue, setPrevValue] = useState<T>(contextValue);\n  const [throttledValue, setThrottledValue] = useState<T>(contextValue);\n\n  if (!contextName) {\n    console.error('No context display name found');\n    return [contextValue, null];\n  }\n\n  useEffect(() => {\n    const unsubscribe = EventBus.subscribe<(throttleValue: T, prevValue: T) => void>(\n      contextName,\n      (throttleValue, prevValue) => {\n        setThrottledValue(throttleValue);\n        setPrevValue(prevValue);\n      },\n    );\n\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    ContextThrottleService.triggerContextUpdate(contextName, contextValue);\n  }, [contextValue, contextName]);\n\n  return [throttledValue, prevValue];\n}\n"]}