{"version":3,"file":"useHref.js","sourceRoot":"","sources":["../../src/hooks/useHref.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AACjE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAS1D,MAAM,UAAU,OAAO,CACrB,EAAK,EACL,EAAE,QAAQ,EAAE,MAAM,EAAqB;IAEvC,MAAM,YAAY,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IAE/C,SAAS,CACP,YAAY,EACZ,mGAAmG,CACpG,CAAC;IAEF,MAAM,IAAI,GAAG,aAAa,CAAC;QACzB,EAAE;QACF,MAAM;QACN,eAAe,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ;KAC7D,CAAC,CAAC;IAEH,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEvE,MAAM,eAAe,GAAG,kBAAkB,EAAE,CAAC;IAC7C,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAc,CAAC,CAAC;IACpF,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAEnD,OAAO,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAC;AAC9D,CAAC","sourcesContent":["import { Location, RelativeRoutingType } from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext } from 'react';\nimport { useResolvedPath } from './useResolvedPath';\nimport { getHrefWithoutHash } from '../utils/getHrefWithoutHash';\nimport { getPathFromTo, invariant } from '../utils/utils';\nimport { InjectParamsIfNeeded } from '../page-types/common';\nimport { NavigationTarget } from '../services';\n\nexport type UseHrefOptions<T extends NavigationTarget> = InjectParamsIfNeeded<\n  T,\n  { relative?: RelativeRoutingType }\n>;\n\nexport function useHref<T extends NavigationTarget>(\n  to: T,\n  { relative, params }: UseHrefOptions<T>,\n) {\n  const routeContext = useContext(RouterContext);\n\n  invariant(\n    routeContext,\n    'You can not use useHref hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n\n  const path = getPathFromTo({\n    to,\n    params,\n    defaultPathname: routeContext.router.state.location.pathname,\n  });\n\n  const { hash, pathname, search } = useResolvedPath(path, { relative });\n\n  const hrefWithoutHash = getHrefWithoutHash();\n  const href = routeContext.router.createHref({ pathname, search, hash } as Location);\n  const location = href.replace(hrefWithoutHash, '');\n\n  return location.startsWith('/') ? location : '/' + location;\n}\n"]}