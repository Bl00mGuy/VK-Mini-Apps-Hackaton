{"version":3,"file":"RouterLink.js","sourceRoot":"","sources":["../../src/components/RouterLink.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C,OAAO,EAGL,UAAU,GAIX,MAAM,OAAO,CAAC;AACf,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAGnE,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAmBpC,MAAM,kBAAkB,GAAG,+BAA+B,CAAC;AAE3D,MAAM,SAAS,GACb,OAAO,MAAM,KAAK,WAAW;IAC7B,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW;IACtC,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,KAAK,WAAW,CAAC;AAEvD,MAAM,eAAe,GAAG,CACtB,EACE,EAAE,EACF,QAAQ,EACR,OAAO,EACP,MAAM,EACN,cAAc,EACd,MAAM,EACN,OAAO,EACP,GAAG,IAAI,EACqC,EAC9C,GAA2B,EAC3B,EAAE;IACF,2CAA2C;IAC3C,IAAI,YAAY,CAAC;IACjB,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAI,gBAAgB,GAAqB,EAAE,CAAC;IAE5C,IAAI,QAAQ,CAAC,EAAE,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QAC/C,mDAAmD;QACnD,YAAY,GAAG,EAAE,CAAC;QAElB,8CAA8C;QAC9C,IAAI,SAAS,EAAE;YACb,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;YACxF,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC;YAEhC,IAAI,SAAS,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EAAE;gBAC1C,mEAAmE;gBACnE,gBAAgB,GAAG,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;aAC7D;iBAAM;gBACL,UAAU,GAAG,IAAI,CAAC;aACnB;SACF;KACF;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,gBAAgB,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAErE,MAAM,eAAe,GAAG,mBAAmB,CAAC,gBAAgB,EAAE;QAC5D,OAAO;QACP,MAAM;QACN,QAAQ;QACR,MAAM;KACP,CAAC,CAAC;IAEH,SAAS,WAAW,CAAC,KAAyC;QAC5D,IAAI,OAAO;YAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;YAC3B,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;IACH,CAAC;IAED,OAAO,CACL,KAAC,IAAI,OACC,IAAI,EACR,IAAI,EAAE,YAAY,IAAI,IAAI,EAC1B,OAAO,EAAE,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAC7D,UAAU,EAAE,GAAG,EACf,MAAM,EAAE,MAAM,GACR,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAAC,eAAe,CAEpC,CAAC","sourcesContent":["import { Link } from '@vkontakte/vkui';\nimport { useHref } from '../hooks/useHref';\nimport { RelativeRoutingType } from '@remix-run/router';\nimport {\n  AnchorHTMLAttributes,\n  CSSProperties,\n  forwardRef,\n  ReactNode,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react';\nimport { useLinkClickHandler } from '../hooks/useLinkClickHandler';\nimport { InjectParamsIfNeeded } from '../page-types/common';\nimport { NavigationTarget } from '../services';\nimport { isString } from '../utils';\n\nexport interface LinkProps<T extends NavigationTarget>\n  extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {\n  to: T;\n  reloadDocument?: boolean;\n  replace?: boolean;\n  relative?: RelativeRoutingType;\n}\n\nexport interface RouterLinkProps<T extends NavigationTarget>\n  extends Omit<LinkProps<T>, 'className' | 'style' | 'children'> {\n  children?: ReactNode;\n  caseSensitive?: boolean;\n  className?: string;\n  end?: boolean;\n  style?: CSSProperties;\n}\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n\nconst RouterLinkInner = <T extends NavigationTarget>(\n  {\n    to,\n    relative,\n    replace,\n    target,\n    reloadDocument,\n    params,\n    onClick,\n    ...rest\n  }: InjectParamsIfNeeded<T, RouterLinkProps<T>>,\n  ref: Ref<HTMLAnchorElement>,\n) => {\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  let navigationTarget: NavigationTarget = to;\n\n  if (isString(to) && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n\n    // Only check for external origins client-side\n    if (isBrowser) {\n      const currentUrl = new URL(window.location.href);\n      const targetUrl = to.startsWith('//') ? new URL(currentUrl.protocol + to) : new URL(to);\n      const path = targetUrl.pathname;\n\n      if (targetUrl.origin === currentUrl.origin) {\n        // Strip the protocol/origin/basename for same-origin absolute URLs\n        navigationTarget = path + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n  }\n\n  const href = useHref(navigationTarget, { relative, params: params });\n\n  const internalOnClick = useLinkClickHandler(navigationTarget, {\n    replace,\n    target,\n    relative,\n    params,\n  });\n\n  function handleClick(event: ReactMouseEvent<HTMLAnchorElement>) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n\n  return (\n    <Link\n      {...rest}\n      href={absoluteHref || href}\n      onClick={isExternal || reloadDocument ? onClick : handleClick}\n      getRootRef={ref}\n      target={target}\n    ></Link>\n  );\n};\n\nexport const RouterLink = forwardRef(RouterLinkInner) as <T extends NavigationTarget>(\n  props: InjectParamsIfNeeded<T, RouterLinkProps<T>> & { ref?: Ref<HTMLAnchorElement> },\n) => JSX.Element;\n"]}