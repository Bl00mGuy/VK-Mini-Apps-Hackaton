export class TransactionExecutor {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    constructor() {
        this.transactions = [];
    }
    static getInstance() {
        if (!TransactionExecutor.instance) {
            TransactionExecutor.instance = new TransactionExecutor();
        }
        return TransactionExecutor.instance;
    }
    static get isRunSyncActive() {
        const transactionExecutor = TransactionExecutor.getInstance();
        const hasMultipleTransactions = transactionExecutor.transactions.length > 1;
        const hasSingleMultiActionTransaction = transactionExecutor.transactions.length === 1 &&
            transactionExecutor.transactions[0].isMultiAction;
        return hasMultipleTransactions || hasSingleMultiActionTransaction;
    }
    static add(transaction) {
        const transactionExecutor = TransactionExecutor.getInstance();
        transactionExecutor.transactions.push(transaction);
    }
    static resetTransactions() {
        const transactionExecutor = TransactionExecutor.getInstance();
        transactionExecutor.transactions = [];
    }
    static async doNext() {
        const transactionExecutor = TransactionExecutor.getInstance();
        const transactions = transactionExecutor.transactions;
        // Нужно делать асинхронно, иначе будет бесконечный цикл навигация-изменение стейта-навигация...
        setTimeout(() => {
            if (transactions.length) {
                transactions[0].doNext();
                if (transactions[0].finished) {
                    transactions.shift();
                }
            }
        });
    }
}
//# sourceMappingURL=TransactionExecutor.js.map