import { EventBus } from './EventBus';
import { TransactionExecutor } from './TransactionExecutor';
export class ContextThrottleService {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    constructor() {
        this.interval = 0;
        this.throttled = true;
        this.contextThrottleMap = {};
    }
    static getInstance() {
        if (!ContextThrottleService.instance) {
            ContextThrottleService.instance = new ContextThrottleService();
        }
        return ContextThrottleService.instance;
    }
    getContextThrottleInfoByName(contextName) {
        if (!(contextName in this.contextThrottleMap)) {
            this.contextThrottleMap[contextName] = {
                prevValue: null,
                throttledValue: null,
                lastUpdateTimestamp: 0,
                updateTimerId: 0,
            };
        }
        return this.contextThrottleMap[contextName];
    }
    isContextChange(contextName, newValue) {
        const contextData = this.getContextThrottleInfoByName(contextName);
        return !(newValue === contextData.throttledValue);
    }
    getTimeUntilNextUpdate(lastUpdateTimestamp) {
        const timeSinceLastUpdate = Date.now() - lastUpdateTimestamp;
        const delayUntilNextUpdate = this.interval - timeSinceLastUpdate;
        return delayUntilNextUpdate;
    }
    updateContextValue(contextName, newValue) {
        const contextData = this.getContextThrottleInfoByName(contextName);
        contextData.prevValue = contextData.throttledValue;
        contextData.lastUpdateTimestamp = Date.now();
        contextData.throttledValue = newValue;
        EventBus.broadcast(contextName, [contextData.throttledValue, contextData.prevValue]);
    }
    throttleUpdateContextValue(contextName, newValue) {
        const contextData = this.getContextThrottleInfoByName(contextName);
        clearTimeout(contextData.updateTimerId);
        if (this.isRunSyncActive())
            return;
        const lastUpdateTimestamp = contextData.lastUpdateTimestamp;
        const timeUntilNextUpdate = this.getTimeUntilNextUpdate(lastUpdateTimestamp);
        if (timeUntilNextUpdate <= 0) {
            this.updateContextValue(contextName, newValue);
        }
        else {
            contextData.updateTimerId = setTimeout(() => {
                this.updateContextValue(contextName, newValue);
            }, timeUntilNextUpdate);
        }
    }
    isRunSyncActive() {
        return TransactionExecutor.isRunSyncActive;
    }
    static triggerContextUpdate(contextName, newValue) {
        const throttledService = ContextThrottleService.getInstance();
        if (!throttledService.isContextChange(contextName, newValue)) {
            return;
        }
        if (!throttledService.throttled && !throttledService.isRunSyncActive()) {
            throttledService.updateContextValue(contextName, newValue);
        }
        else {
            throttledService.throttleUpdateContextValue(contextName, newValue);
        }
    }
    static updateThrottledServiceSettings(settings) {
        const throttledService = ContextThrottleService.getInstance();
        throttledService.interval = settings.interval;
        throttledService.throttled = settings.throttled;
    }
}
//# sourceMappingURL=ContextThrottleService.js.map