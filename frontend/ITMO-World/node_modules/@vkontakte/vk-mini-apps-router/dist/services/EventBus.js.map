{"version":3,"file":"EventBus.js","sourceRoot":"","sources":["../../src/services/EventBus.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,QAAQ;IAInB,gEAAgE;IAChE;QAHQ,kBAAa,GAAkC,EAAE,CAAC;IAGnC,CAAC;IAEjB,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACtB,QAAQ,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;SACpC;QAED,OAAO,QAAQ,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAEO,YAAY,CAAC,WAAmB;QACtC,OAAO,WAAW,IAAI,IAAI,CAAC,aAAa,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,SAAS,CAAC,WAAmB,EAAE,IAAe;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACxC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;YACvC,OAAO;SACR;QAED,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,MAAM,CAAC,SAAS,CAAqB,WAAmB,EAAE,QAAW;QAC1E,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QAExC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;YACvC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;SACjD;QAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACtD,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAExB,OAAO,GAAG,EAAE;YACV,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC3B,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE;gBACxB,OAAO,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;IACJ,CAAC;CACF","sourcesContent":["export class EventBus {\n  private static instance?: EventBus;\n  private subscriptions: Record<string, Set<Function>> = {};\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static getInstance() {\n    if (!EventBus.instance) {\n      EventBus.instance = new EventBus();\n    }\n\n    return EventBus.instance;\n  }\n\n  private isEventExist(contextName: string) {\n    return contextName in this.subscriptions;\n  }\n\n  public static broadcast(contextName: string, args: unknown[]) {\n    const eventBus = EventBus.getInstance();\n    if (!eventBus.isEventExist(contextName)) {\n      return;\n    }\n\n    eventBus.subscriptions[contextName].forEach((callback) => callback(...args));\n  }\n\n  public static subscribe<T extends Function>(contextName: string, callback: T) {\n    const eventBus = EventBus.getInstance();\n\n    if (!eventBus.isEventExist(contextName)) {\n      eventBus.subscriptions[contextName] = new Set();\n    }\n\n    const callbacks = eventBus.subscriptions[contextName];\n    callbacks.add(callback);\n\n    return () => {\n      callbacks.delete(callback);\n      if (callbacks.size === 0) {\n        delete eventBus.subscriptions[contextName];\n      }\n    };\n  }\n}\n"]}