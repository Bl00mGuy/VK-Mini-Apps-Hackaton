/**
 * Добавляет к числу 0 в начале, если число меньше 10
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { leadingZero } from '@vkontakte/vkjs';
 *
 * assert.strictEqual(leadingZero(5), "05");
 * assert.strictEqual(leadingZero(15), "15");
 * ```
 *
 * @param number Число для форматирования
 */ export function leadingZero(number) {
    if (number >= 10) {
        return String(number);
    } else {
        return '0' + String(number);
    }
}
/**
 * Форматирует число, разбивая его на разряды
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { formatNumber } from '@vkontakte/vkjs';
 *
 * assert.strictEqual(formatNumber(1e9), "1 000 000 000");
 * assert.strictEqual(formatNumber(123456789), "123 456 789");
 * ```
 */ export function formatNumber(number) {
    var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ' ', decimalSeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ',';
    var numberParts = number.toString().split('.');
    var result = [];
    for(var i = numberParts[0].length - 3; i > -3; i -= 3){
        result.unshift(numberParts[0].slice(i > 0 ? i : 0, i + 3));
    }
    numberParts[0] = result.join(separator);
    return numberParts.join(decimalSeparator);
}

//# sourceMappingURL=numbers.js.map