import { _ as _to_consumable_array } from "@swc/helpers/_/_to_consumable_array";
import { uniqueArrayFallback } from '../internal/uniqueArray';
/**
 * Создаёт массив чисел требуемой длины
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { createArray } from '@vkontakte/vkjs';
 *
 * assert.deepStrictEqual(createArray(5), [0, 1, 2, 3, 4]);
 * assert.deepStrictEqual(createArray(3, 2), [2, 3, 4]);
 * ```
 *
 * @param arrayLength Длина массива
 * @param startIndex Начальный индекс (по умолчанию 0)
 */ export function createArray(arrayLength) {
    var startIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return Array.from({
        length: arrayLength
    }, function(_, index) {
        return startIndex + index;
    });
}
/**
 * Вычисляет сумму элементов массива
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { createArray } from '@vkontakte/vkjs';
 *
 * assert.strictEqual(sumArray([0, 1, 2, 3, 4]), 10);
 * ```
 */ export function sumArray(array) {
    if (!Array.isArray(array) || !array.length) {
        return 0;
    }
    return array.reduce(function(previous, current) {
        return current + previous;
    });
}
/**
 * Находит среднее арифметическое элементов массива
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { createArray } from '@vkontakte/vkjs';
 *
 * assert.strictEqual(averageArray([0, 1, 2, 3, 4]), 2);
 * ```
 */ export function averageArray(array) {
    if (!Array.isArray(array) || !array.length) {
        return 0;
    }
    return sumArray(array) / array.length;
}
/**
 * Возвращает новый массив с уникальными элементами
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { createArray } from '@vkontakte/vkjs';
 *
 * assert.deepStrictEqual(uniqueArray([1, 1, 2, 2, 3]), [1, 2, 3]);
 * ```
 */ export function uniqueArray(array) {
    if (!Array.isArray(array) || !array.length) {
        return [];
    }
    if (typeof Set !== 'undefined') {
        return Array.from(new Set(array));
    }
    return uniqueArrayFallback(array);
}
/**
 * Перемешивает исходный массив и возвращает новый
 */ export function shuffleArray(array) {
    var result = array.slice();
    for(var i = result.length - 1; i > 0; i--){
        var j = Math.floor(Math.random() * (i + 1));
        var ref;
        ref = [
            result[j],
            result[i]
        ], result[i] = ref[0], result[j] = ref[1], ref;
    }
    return result;
}
/**
 * Разбивает массив на чанки
 *
 * @example
 * ```ts
 * import assert from 'node:assert';
 * import { createArray } from '@vkontakte/vkjs';
 *
 * assert.deepStrictEqual(
 *   chunkArray([1,2,3,4,5,6,7], 2),
 *   [[1,2], [3,4], [5,6], [7]],
 * );
 * ```
 */ export function chunkArray(array, size) {
    if (!Array.isArray(array) || !array.length) {
        return [];
    }
    if (!size) {
        return [
            array
        ];
    }
    var head = array.slice(0, size);
    var tail = array.slice(size);
    return [
        head
    ].concat(_to_consumable_array(chunkArray(tail, size)));
}
/**
 * Удаляет из массива элемент по значению.
 * Если элемент был удалён – возвращает новый массив.
 *
 * @example
 *
 * omitFromArray([1, 2, 3], 3) // [1, 2]
 * omitFromArray([1, 2, 3], 5) // [1, 2, 3]
 */ export function omitFromArray() {
    var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], value = arguments.length > 1 ? arguments[1] : void 0;
    var index = array.indexOf(value);
    if (index < 0) {
        return array;
    } else {
        return _to_consumable_array(array.slice(0, index)).concat(_to_consumable_array(array.slice(index + 1)));
    }
}
/**
 * Возвращает разницу между двумя массивами.
 * Вернёт элементы, которых не хватает во втором массиве.
 *
 * @example
 *
 * difference([1, 2, 3], [1, 2, 3]) // []
 * difference([1, 2, 3], [1]) // [2, 3]
 * difference([1, 2, 3], [1, 10, 100]) // [2, 3]
 */ export function difference() {
    var array1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], array2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    return array1.reduce(function(res, item) {
        if (!array2.includes(item)) {
            res.push(item);
        }
        return res;
    }, []);
}

//# sourceMappingURL=arrays.js.map