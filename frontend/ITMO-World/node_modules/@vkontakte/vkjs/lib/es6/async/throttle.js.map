{"version":3,"sources":["../../../src/async/throttle.ts"],"sourcesContent":["/**\n * Возвращает throttled функцию, которая задерживает вызов `fn` на\n * `threshold` миллисекунд от последнего вызова. Если метод вызывается снова до\n * выполнения предыдущего, предыдущий вызов будет прерван.\n *\n * @param fn Функция, которую надо вызывать\n * @param threshold Длительность в миллисекундах\n * @param scope Контекст, с которым будет совершен вызов функции\n */\nexport function throttle<T extends any[]>(\n  fn: (...args: T) => unknown,\n  threshold = 50,\n  scope = typeof window !== 'undefined' ? window : undefined,\n) {\n  let prevDate: number = Date.now() - threshold;\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  const throttledFn = (...args: T) => {\n    const timeLeft = prevDate + threshold - Date.now();\n\n    clearTimeout(timeoutId);\n    if (timeLeft > 0) {\n      timeoutId = setTimeout(() => {\n        prevDate = Date.now();\n        fn.apply(scope, args);\n      }, timeLeft);\n      return;\n    }\n\n    prevDate = Date.now();\n    fn.apply(scope, args);\n  };\n\n  throttledFn.cancel = () => {\n    clearTimeout(timeoutId);\n  };\n\n  return throttledFn;\n}\n"],"names":["throttle","fn","threshold","scope","window","undefined","prevDate","Date","now","timeoutId","throttledFn","args","timeLeft","clearTimeout","setTimeout","apply","cancel"],"mappings":"AAAA;;;;;;;;CAQC,GACD,OAAO,SAASA,SACdC,EAA2B;QAC3BC,YAAAA,iEAAY,IACZC,QAAAA,iEAAQ,OAAOC,WAAW,cAAcA,SAASC;IAEjD,IAAIC,WAAmBC,KAAKC,GAAG,KAAKN;IACpC,IAAIO;IAEJ,IAAMC,cAAc;yCAAIC;YAAAA;;QACtB,IAAMC,WAAWN,WAAWJ,YAAYK,KAAKC,GAAG;QAEhDK,aAAaJ;QACb,IAAIG,WAAW,GAAG;YAChBH,YAAYK,WAAW;gBACrBR,WAAWC,KAAKC,GAAG;gBACnBP,GAAGc,KAAK,CAACZ,OAAOQ;YAClB,GAAGC;YACH;QACF;QAEAN,WAAWC,KAAKC,GAAG;QACnBP,GAAGc,KAAK,CAACZ,OAAOQ;IAClB;IAEAD,YAAYM,MAAM,GAAG;QACnBH,aAAaJ;IACf;IAEA,OAAOC;AACT"}