/**
 * Возвращает throttled функцию, которая задерживает вызов `fn` на
 * `threshold` миллисекунд от последнего вызова. Если метод вызывается снова до
 * выполнения предыдущего, предыдущий вызов будет прерван.
 *
 * @param fn Функция, которую надо вызывать
 * @param threshold Длительность в миллисекундах
 * @param scope Контекст, с которым будет совершен вызов функции
 */ export function throttle(fn) {
    var threshold = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, scope = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : typeof window !== 'undefined' ? window : undefined;
    var prevDate = Date.now() - threshold;
    var timeoutId;
    var throttledFn = function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        var timeLeft = prevDate + threshold - Date.now();
        clearTimeout(timeoutId);
        if (timeLeft > 0) {
            timeoutId = setTimeout(function() {
                prevDate = Date.now();
                fn.apply(scope, args);
            }, timeLeft);
            return;
        }
        prevDate = Date.now();
        fn.apply(scope, args);
    };
    throttledFn.cancel = function() {
        clearTimeout(timeoutId);
    };
    return throttledFn;
}

//# sourceMappingURL=throttle.js.map