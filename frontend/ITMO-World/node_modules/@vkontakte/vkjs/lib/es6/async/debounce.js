/**
 * Функция debounced, которая будет задержана на заданное `delay` время
 * в миллисекундах. Если метод будет вызван снова до истечения тайм-аута,
 * предыдущий вызов будет прерван.
 */ /**
   * Отменяет вызов функции
   */ /**
 * Возвращает debounced функцию, которая задерживает вызов `fn` на заданное
 * `delay` время в миллисекундах. Если метод вызывается снова до истечения
 * тайм-аута, предыдущий вызов будет прерван.
 *
 * @param fn Функция которую надо "отложить"
 * @param delay Время задержки вызова в миллисекундах
 * @param context Контекст с которым будет совершен вызов функции
 */ export function debounce(fn, delay) {
    var context = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : typeof window !== 'undefined' ? window : undefined;
    var timeoutId;
    var args;
    var later = function() {
        return fn.apply(context, args);
    };
    var debouncedFn = function() {
        for(var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++){
            a[_key] = arguments[_key];
        }
        args = a;
        clearTimeout(timeoutId);
        timeoutId = setTimeout(later, delay);
    };
    debouncedFn.cancel = function() {
        clearTimeout(timeoutId);
    };
    return debouncedFn;
}

//# sourceMappingURL=debounce.js.map