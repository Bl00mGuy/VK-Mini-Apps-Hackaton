{"version":3,"sources":["../../src/array/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from '../internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(createArray(5), [0, 1, 2, 3, 4]);\n * assert.deepStrictEqual(createArray(3, 2), [2, 3, 4]);\n * ```\n *\n * @param arrayLength Длина массива\n * @param startIndex Начальный индекс (по умолчанию 0)\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return Array.from({ length: arrayLength }, (_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(sumArray([0, 1, 2, 3, 4]), 10);\n * ```\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.strictEqual(averageArray([0, 1, 2, 3, 4]), 2);\n * ```\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(uniqueArray([1, 1, 2, 2, 3]), [1, 2, 3]);\n * ```\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  const result = array.slice();\n\n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    [result[i], result[j]] = [result[j], result[i]];\n  }\n\n  return result;\n}\n\n/**\n * Разбивает массив на чанки\n *\n * @example\n * ```ts\n * import assert from 'node:assert';\n * import { createArray } from '@vkontakte/vkjs';\n *\n * assert.deepStrictEqual(\n *   chunkArray([1,2,3,4,5,6,7], 2),\n *   [[1,2], [3,4], [5,6], [7]],\n * );\n * ```\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (!array2.includes(item)) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"names":["averageArray","chunkArray","createArray","difference","omitFromArray","shuffleArray","sumArray","uniqueArray","arrayLength","startIndex","Array","from","length","_","index","array","isArray","reduce","previous","current","Set","uniqueArrayFallback","result","slice","i","j","Math","floor","random","size","head","tail","value","indexOf","array1","array2","res","item","includes","push"],"mappings":";;;;;;;;;;;IAkDgBA,YAAY;eAAZA;;IA2DAC,UAAU;eAAVA;;IA5FAC,WAAW;eAAXA;;IAwIAC,UAAU;eAAVA;;IApBAC,aAAa;eAAbA;;IAlDAC,YAAY;eAAZA;;IAnDAC,QAAQ;eAARA;;IAoCAC,WAAW;eAAXA;;;;2BApEoB;AAEpC;;;;;;;;;;;;;;CAcC,GACM,SAASL,YAAYM,WAAmB;QAAEC,aAAAA,iEAAa;IAC5D,OAAOC,MAAMC,IAAI,CAAC;QAAEC,QAAQJ;IAAY,GAAG,SAACK,GAAGC;eAAUL,aAAaK;;AACxE;AAEA;;;;;;;;;;CAUC,GACM,SAASR,SAASS,KAAe;IACtC,IAAI,CAACL,MAAMM,OAAO,CAACD,UAAU,CAACA,MAAMH,MAAM,EAAE;QAC1C,OAAO;IACT;IACA,OAAOG,MAAME,MAAM,CAAC,SAACC,UAAUC;eAAYA,UAAUD;;AACvD;AAEA;;;;;;;;;;CAUC,GACM,SAASlB,aAAae,KAAe;IAC1C,IAAI,CAACL,MAAMM,OAAO,CAACD,UAAU,CAACA,MAAMH,MAAM,EAAE;QAC1C,OAAO;IACT;IACA,OAAON,SAASS,SAASA,MAAMH,MAAM;AACvC;AAEA;;;;;;;;;;CAUC,GACM,SAASL,YAAeQ,KAAU;IACvC,IAAI,CAACL,MAAMM,OAAO,CAACD,UAAU,CAACA,MAAMH,MAAM,EAAE;QAC1C,OAAO,EAAE;IACX;IAEA,IAAI,OAAOQ,QAAQ,aAAa;QAC9B,OAAOV,MAAMC,IAAI,CAAC,IAAIS,IAAIL;IAC5B;IAEA,OAAOM,IAAAA,gCAAmB,EAACN;AAC7B;AAEA;;CAEC,GACM,SAASV,aAAgBU,KAAU;IACxC,IAAMO,SAASP,MAAMQ,KAAK;IAE1B,IAAK,IAAIC,IAAIF,OAAOV,MAAM,GAAG,GAAGY,IAAI,GAAGA,IAAK;QAC1C,IAAMC,IAAIC,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAMJ,CAAAA,IAAI,CAAA;;cAEjB;YAACF,MAAM,CAACG,EAAE;YAAEH,MAAM,CAACE,EAAE;SAAC,EAA9CF,MAAM,CAACE,EAAE,WAAEF,MAAM,CAACG,EAAE;IACvB;IAEA,OAAOH;AACT;AAEA;;;;;;;;;;;;;CAaC,GACM,SAASrB,WAAcc,KAAU,EAAEc,IAAY;IACpD,IAAI,CAACnB,MAAMM,OAAO,CAACD,UAAU,CAACA,MAAMH,MAAM,EAAE;QAC1C,OAAO,EAAE;IACX;IAEA,IAAI,CAACiB,MAAM;QACT,OAAO;YAACd;SAAM;IAChB;IAEA,IAAMe,OAAOf,MAAMQ,KAAK,CAAC,GAAGM;IAC5B,IAAME,OAAOhB,MAAMQ,KAAK,CAACM;IAEzB,OAAO;QAACC;KAAgC,CAAjC,OAAO,uBAAG7B,WAAW8B,MAAMF;AACpC;AAEA;;;;;;;;CAQC,GACM,SAASzB;QAAiBW,QAAAA,iEAAa,EAAE,EAAEiB;IAChD,IAAMlB,QAAQC,MAAMkB,OAAO,CAACD;IAE5B,IAAIlB,QAAQ,GAAG;QACb,OAAOC;IACT,OAAO;QACL,OAAO,AAAC,uBAAGA,MAAMQ,KAAK,CAAC,GAAGT,eAAQ,uBAAGC,MAAMQ,KAAK,CAACT,QAAQ;IAC3D;AACF;AAEA;;;;;;;;;CASC,GACM,SAASX;QAAc+B,SAAAA,iEAAc,EAAE,EAAEC,SAAAA,iEAAc,EAAE;IAC9D,OAAOD,OAAOjB,MAAM,CAAM,SAACmB,KAAKC;QAC9B,IAAI,CAACF,OAAOG,QAAQ,CAACD,OAAO;YAC1BD,IAAIG,IAAI,CAACF;QACX;QACA,OAAOD;IACT,GAAG,EAAE;AACP"}