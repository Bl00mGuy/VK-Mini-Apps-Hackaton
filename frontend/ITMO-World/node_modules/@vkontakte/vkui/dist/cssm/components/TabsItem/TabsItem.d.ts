import * as React from 'react';
import type { AnchorHTMLAttributesOnly, HTMLAttributesWithRootRef } from '../../types';
import { type TappableProps } from '../Tappable/Tappable';
export interface TabsItemProps extends HTMLAttributesWithRootRef<HTMLElement>, AnchorHTMLAttributesOnly, Pick<TappableProps, 'activeMode' | 'hoverMode' | 'hovered' | 'activated' | 'hasActive' | 'hasHover' | 'focusVisibleMode'> {
    /**
     * Добавляет иконку слева.
     *
     * - Для `mode="default"` используйте иконки размером 24.
     * - Для всех остальных `mode` используйте иконки размером 20.
     */
    before?: React.ReactNode;
    /**
     * Добавляет элемент слева от `after`.
     *
     * - `React.ReactElement` – либо [`Badge`](https://vkcom.github.io/VKUI/#/Badge) с параметром `mode="prominent"`.
     *   либо [`Counter`](https://vkcom.github.io/VKUI/#/Counter) с параметрами `mode="prominent" size="s"`.
     * - `number` – для показа текстового блока с переданным числом.
     */
    status?: React.ReactElement | number;
    /**
     * Добавляет иконку справа.
     *
     * Например, `<Icon16Dropdown />`
     */
    after?: React.ReactNode;
    selected?: boolean;
    disabled?: boolean;
}
/**
 * @see https://vkcom.github.io/VKUI/#/TabsItem
 */
export declare const TabsItem: ({ before, children, status, after, selected, className, role, tabIndex: tabIndexProp, getRootRef, hoverMode, activeMode, hovered, activated, hasHover, hasActive, focusVisibleMode, ...restProps }: TabsItemProps) => React.ReactNode;
//# sourceMappingURL=TabsItem.d.ts.map