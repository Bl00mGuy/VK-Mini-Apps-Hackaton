import * as React from 'react';
import { type VKUITouchEvent } from '../../lib/touch';
import type { HasComponent, HasRootRef } from '../../types';
export interface CustomTouchEvent extends Gesture {
    originalEvent: VKUITouchEvent;
}
export type HoverHandler = (outputEvent: MouseEvent) => void;
export type CustomTouchEventHandler = (event: CustomTouchEvent) => void;
export interface TouchProps extends React.AllHTMLAttributes<HTMLElement>, HasRootRef<HTMLElement>, HasComponent {
    /**
     * Привязать onEnter и onLeave через pointer-events - работает на disabled-инпутах
     */
    usePointerHover?: boolean;
    useCapture?: boolean;
    slideThreshold?: number;
    noSlideClick?: boolean;
    onEnter?: HoverHandler;
    onLeave?: HoverHandler;
    onStart?: CustomTouchEventHandler;
    onStartX?: CustomTouchEventHandler;
    onStartY?: CustomTouchEventHandler;
    onMove?: CustomTouchEventHandler;
    onMoveX?: CustomTouchEventHandler;
    onMoveY?: CustomTouchEventHandler;
    onEnd?: CustomTouchEventHandler;
    onEndX?: CustomTouchEventHandler;
    onEndY?: CustomTouchEventHandler;
    stopPropagation?: boolean;
}
export interface Gesture {
    startX: number;
    startY: number;
    startT: Date;
    duration: number;
    isPressed: boolean;
    isY: boolean;
    isX: boolean;
    isSlideX: boolean;
    isSlideY: boolean;
    isSlide: boolean;
    clientX: number;
    clientY: number;
    shiftX: number;
    shiftY: number;
    shiftXAbs: number;
    shiftYAbs: number;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Touch
 */
export declare const Touch: ({ onStart, onStartX, onStartY, onMove, onMoveX, onMoveY, onEnter, onLeave, onEnd, onEndX, onEndY, onClickCapture, usePointerHover, slideThreshold, useCapture, Component, getRootRef, noSlideClick, stopPropagation, ...restProps }: TouchProps) => import("react/jsx-runtime").JSX.Element;
//# sourceMappingURL=Touch.d.ts.map