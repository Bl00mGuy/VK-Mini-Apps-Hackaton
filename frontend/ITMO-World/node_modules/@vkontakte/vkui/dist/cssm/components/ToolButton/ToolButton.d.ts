import { type AdaptiveIconRendererProps } from '../AdaptiveIconRenderer/AdaptiveIconRenderer';
import { type TappableProps } from '../Tappable/Tappable';
export interface ToolButtonProps extends TappableProps, AdaptiveIconRendererProps {
    mode?: 'primary' | 'secondary' | 'tertiary' | 'outline';
    appearance?: 'accent' | 'neutral';
    direction?: 'row' | 'column';
    /**
     * Задаёт `50%` закругления для контейнера.
     *
     * > Note: игнорируется при `direction="column"` если передан `children`.
     */
    rounded?: boolean;
}
/**
 * Кнопки, которые используются для вызова инструмента, вставки аттачей или
 * для форматирования. Их можно использовать как кнопки для разового действия
 * или для включения/выключения режима.
 *
 * @see https://vkcom.github.io/VKUI/#/ToolButton
 */
export declare const ToolButton: ({ mode, appearance, direction, className, children, IconCompact, IconRegular, rounded, ...restProps }: ToolButtonProps) => React.ReactNode;
export declare function getRoundedClassName(direction: 'row' | 'column', hasChildren: boolean): string | undefined;
//# sourceMappingURL=ToolButton.d.ts.map