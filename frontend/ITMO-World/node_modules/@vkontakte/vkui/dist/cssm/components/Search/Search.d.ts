import * as React from 'react';
import type { HasRef, HasRootRef } from '../../types';
import { type IconButtonProps } from '../IconButton/IconButton';
export type RenderIconButtonFn = (icon: React.ReactNode, props?: Partial<IconButtonProps>) => React.ReactNode;
export interface SearchProps extends React.InputHTMLAttributes<HTMLInputElement>, HasRootRef<HTMLDivElement>, HasRef<HTMLInputElement> {
    /**
     * iOS only. Текст кнопки "отмена", которая чистит текстовое поле и убирает фокус.
     */
    after?: React.ReactNode;
    before?: React.ReactNode;
    icon?: React.ReactNode | ((renderFn: RenderIconButtonFn) => React.ReactNode);
    onIconClick?: React.PointerEventHandler<HTMLElement>;
    defaultValue?: string;
    iconLabel?: string;
    clearLabel?: string;
    /**
     * Удаляет отступы у компонента
     */
    noPadding?: boolean;
    /**
     * Текст для кнопки Найти
     */
    findButtonText?: string;
    /**
     * Коллбэк для кнопки Найти
     */
    onFindButtonClick?: React.MouseEventHandler<HTMLElement>;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Search
 */
export declare const Search: ({ id: idProp, before, className, placeholder, after, getRef, icon: iconProp, onIconClick, style, autoComplete, onChange, iconLabel, clearLabel, noPadding, getRootRef, findButtonText, onFindButtonClick, ...inputProps }: SearchProps) => React.ReactNode;
//# sourceMappingURL=Search.d.ts.map