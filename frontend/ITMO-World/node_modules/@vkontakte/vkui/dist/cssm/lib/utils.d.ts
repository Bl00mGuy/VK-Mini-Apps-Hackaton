import * as React from 'react';
export type ImgOnlyAttributes = {
    [index in Exclude<keyof React.ImgHTMLAttributes<HTMLImageElement>, keyof React.HTMLAttributes<HTMLImageElement>>]: React.ImgHTMLAttributes<HTMLImageElement>[index];
};
export declare function setRef<T>(element: T, ref?: React.Ref<T>): void;
export declare function multiRef<T>(...refs: Array<React.Ref<T> | undefined>): React.RefObject<T>;
export declare const stopPropagation: <T extends React.SyntheticEvent>(event: T) => void;
export declare function addClassNameToElement(element: HTMLElement, className: string): void;
export declare function removeClassNameFromElement(element: HTMLElement, classNameToRemove: string): void;
type ExcludeKeysWithUndefined<T> = {
    [P in keyof T]?: Exclude<T[P], undefined>;
};
export declare const excludeKeysWithUndefined: <T extends Record<string | number | symbol, any>>(obj: T) => ExcludeKeysWithUndefined<T>;
export declare const isDOMTypeElement: <P extends React.HTMLAttributes<T> | React.SVGAttributes<T>, T extends Element>(element: React.ReactElement) => element is Omit<React.DOMElement<P, T>, "ref"> & {
    ref?: React.Ref<T> | undefined;
};
export declare function isValidNotReactFragmentElement(children: Parameters<typeof React.isValidElement>[0]): children is React.ReactElement<Record<PropertyKey, any>>;
export declare function isForwardRefElement<P extends React.HTMLAttributes<T> | React.SVGAttributes<T>, T extends Element>(children: Parameters<typeof React.isValidElement>[0]): children is Omit<React.DOMElement<P, T>, 'ref'> & {
    ref?: React.Ref<T> | undefined;
};
/**
 * При использовании пропа fetchPriority генерируется warning "Invalid DOM property" (версия React 18.*)
 * Ворнинга нет в React версии 19.*, поэтому пока поддерживаем 2 версии наименования
 */
export declare function getFetchPriorityProp(value: React.ImgHTMLAttributes<HTMLElement>['fetchPriority']): {
    fetchPriority: 'high' | 'low' | 'auto' | undefined;
} | {
    fetchpriority: 'high' | 'low' | 'auto' | undefined;
};
export declare function clickByKeyboardHandler(event: React.KeyboardEvent<HTMLDivElement>): void;
export {};
//# sourceMappingURL=utils.d.ts.map