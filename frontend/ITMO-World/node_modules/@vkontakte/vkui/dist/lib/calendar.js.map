{"version":3,"sources":["../../src/lib/calendar.ts"],"sourcesContent":["import {\n  addDays,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  isAfter,\n  isBefore,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n  isSameDay,\n  startOfMonth,\n  startOfWeek,\n  subDays,\n  subWeeks,\n} from 'date-fns';\nimport { clamp as clampNumber } from '../helpers/math';\n\nexport const DEFAULT_MAX_YEAR = 9999;\n// 100 - из-за ограничений dayjs https://github.com/iamkun/dayjs/issues/2591\nexport const DEFAULT_MIN_YEAR = 100;\n\nexport const getYears = (\n  currentYear: number,\n  range: number,\n): Array<{\n  value: number;\n  label: string;\n}> => {\n  const years: Array<{\n    value: number;\n    label: string;\n  }> = [];\n\n  const minYear = clampNumber(currentYear - range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n  const maxYear = clampNumber(currentYear + range, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR);\n\n  for (let i = minYear; i <= maxYear; i++) {\n    years.push({ label: String(i).padStart(4, '0'), value: i });\n  }\n\n  return years;\n};\n\nexport const getMonths = (\n  locale?: string,\n): Array<{\n  value: number;\n  label: string;\n}> => {\n  const months: Array<{\n    value: number;\n    label: string;\n  }> = [];\n  const formatter = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n  });\n\n  for (let i = 0; i < 12; i++) {\n    months.push({\n      label: formatter.format(new Date('1970-01-01').setMonth(i)),\n      value: i,\n    });\n  }\n\n  return months;\n};\n\nexport const getDaysNames = (\n  now: Date,\n  weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  locale?: string,\n): string[] => {\n  const formatter = new Intl.DateTimeFormat(locale, {\n    weekday: 'short',\n  });\n  return eachDayOfInterval({\n    start: startOfWeek(now, { weekStartsOn }),\n    end: endOfWeek(now, { weekStartsOn }),\n  }).map((day) => formatter.format(day));\n};\n\nexport const navigateDate = (date?: Date | null, key?: string): Date => {\n  let newDate = date ?? new Date();\n\n  switch (key) {\n    case 'ArrowRight':\n      newDate = addDays(newDate, 1);\n      break;\n    case 'ArrowLeft':\n      newDate = subDays(newDate, 1);\n      break;\n    case 'ArrowUp':\n      newDate = subWeeks(newDate, 1);\n      break;\n    case 'ArrowDown':\n      newDate = addWeeks(newDate, 1);\n      break;\n  }\n\n  return newDate;\n};\n\nexport const getWeeks = (viewDate: Date, weekStartsOn: 0 | 1 | 2 | 3 | 4 | 5 | 6): Date[][] => {\n  const start = startOfWeek(startOfMonth(viewDate), { weekStartsOn });\n  const end = endOfWeek(endOfMonth(viewDate), { weekStartsOn });\n\n  let count = 0;\n  let current = start;\n  const nestedWeeks: Date[][] = [];\n  let lastDay = null;\n  while (isBefore(current, end)) {\n    const weekNumber = Math.floor(count / 7);\n    nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n    const day = current.getDay();\n    if (lastDay !== day) {\n      lastDay = day;\n      nestedWeeks[weekNumber].push(current);\n      count += 1;\n    }\n    current = addDays(current, 1);\n  }\n  return nestedWeeks;\n};\n\nexport const setTimeEqual = (to: Date, from?: Date | null): Date => {\n  if (from) {\n    to.setHours(from.getHours());\n    to.setMinutes(from.getMinutes());\n    to.setSeconds(from.getSeconds());\n    to.setMilliseconds(from.getMilliseconds());\n  }\n\n  return to;\n};\n\nexport const isFirstDay = (day: Date, dayOfWeek: number): boolean =>\n  dayOfWeek === 0 || isFirstDayOfMonth(day);\n\nexport const isLastDay = (day: Date, dayOfWeek: number): boolean =>\n  dayOfWeek === 6 || isLastDayOfMonth(day);\n\n/**\n * Возвращает дату, ограниченную `min` и/или `max` значениями\n */\nexport function clamp(day: Date, options: { min?: Date; max?: Date } = {}): Date {\n  const { min, max } = options;\n  if (min && isBefore(day, min)) {\n    return min;\n  }\n  if (max && isAfter(day, max)) {\n    return max;\n  }\n  return day;\n}\n\n/**\n * Позволяет определить удовлетворяет ли исходная дата заданным ограничения `min` и/или `max`\n */\nexport function isDayMinMaxRestricted(\n  day: Date,\n  options: { min?: Date; max?: Date; withTime?: boolean } = {},\n): boolean {\n  const { min, max, withTime = false } = options;\n  if (!withTime && ((min && isSameDay(day, min)) || (max && isSameDay(day, max)))) {\n    return false;\n  }\n  return Boolean((min && isBefore(day, min)) || (max && isAfter(day, max)));\n}\n"],"names":["addDays","addWeeks","eachDayOfInterval","endOfMonth","endOfWeek","isAfter","isBefore","isFirstDayOfMonth","isLastDayOfMonth","isSameDay","startOfMonth","startOfWeek","subDays","subWeeks","clamp","clampNumber","DEFAULT_MAX_YEAR","DEFAULT_MIN_YEAR","getYears","currentYear","range","years","minYear","maxYear","i","push","label","String","padStart","value","getMonths","locale","months","formatter","Intl","DateTimeFormat","month","format","Date","setMonth","getDaysNames","now","weekStartsOn","weekday","start","end","map","day","navigateDate","date","key","newDate","getWeeks","viewDate","count","current","nestedWeeks","lastDay","weekNumber","Math","floor","getDay","setTimeEqual","to","from","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","isFirstDay","dayOfWeek","isLastDay","options","min","max","isDayMinMaxRestricted","withTime","Boolean"],"mappings":"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"}