{"version":3,"sources":["../../src/hooks/useCalendar.ts"],"sourcesContent":["import * as React from 'react';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameDay, startOfDay, subMonths } from 'date-fns';\nimport type { CalendarProps } from '../components/Calendar/Calendar';\nimport { DEFAULT_MAX_YEAR, DEFAULT_MIN_YEAR, isDayMinMaxRestricted } from '../lib/calendar';\n\nexport interface UseCalendarDependencies\n  extends Pick<\n    CalendarProps,\n    | 'onHeaderChange'\n    | 'onNextMonth'\n    | 'onPrevMonth'\n    | 'minDateTime'\n    | 'maxDateTime'\n    | 'shouldDisableDate'\n    | 'disableFuture'\n    | 'disablePast'\n  > {\n  value?: Array<Date | null> | Date;\n}\n\nexport function useCalendar({\n  value,\n  disablePast,\n  disableFuture,\n  shouldDisableDate,\n  onHeaderChange,\n  onNextMonth,\n  onPrevMonth,\n  minDateTime,\n  maxDateTime,\n}: UseCalendarDependencies): {\n  viewDate: Date;\n  setViewDate: (value: Date) => void;\n  setPrevMonth: () => void;\n  setNextMonth: () => void;\n  focusedDay: Date | undefined;\n  setFocusedDay: React.Dispatch<React.SetStateAction<Date | undefined>>;\n  isDayFocused: (day: Date) => boolean;\n  isDayDisabled: (day: Date, withTime?: boolean) => boolean;\n  resetSelectedDay: () => void;\n  isMonthDisabled: (month: number, year?: number) => boolean;\n  isYearDisabled: (year: number) => boolean;\n} {\n  const [viewDate, setViewDate] = React.useState(\n    (Array.isArray(value) ? value[0] : value) ?? new Date(),\n  );\n  const [focusedDay, setFocusedDay] = React.useState<Date>();\n\n  const setPrevMonth = React.useCallback(() => {\n    onPrevMonth?.();\n    setViewDate(subMonths(viewDate, 1));\n  }, [viewDate, onPrevMonth]);\n  const setNextMonth = React.useCallback(() => {\n    onNextMonth?.();\n    setViewDate(addMonths(viewDate, 1));\n  }, [viewDate, onNextMonth]);\n\n  const handleSetViewDate = React.useCallback(\n    (value: Date) => {\n      onHeaderChange?.(value);\n      setViewDate(value);\n    },\n    [onHeaderChange],\n  );\n\n  const isDayFocused = React.useCallback(\n    (day: Date) => Boolean(focusedDay && isSameDay(day, focusedDay)),\n    [focusedDay],\n  );\n\n  const isDayDisabled = React.useCallback(\n    (day: Date, withTime?: boolean) => {\n      const now = new Date();\n      if (shouldDisableDate) {\n        return shouldDisableDate(day);\n      }\n      if (disableFuture) {\n        return isAfter(startOfDay(day), now);\n      }\n      if (disablePast) {\n        return isBefore(endOfDay(day), now);\n      }\n      if (minDateTime || maxDateTime) {\n        return isDayMinMaxRestricted(day, { min: minDateTime, max: maxDateTime, withTime });\n      }\n\n      return false;\n    },\n    [disableFuture, disablePast, shouldDisableDate, minDateTime, maxDateTime],\n  );\n\n  const isMonthDisabled = React.useCallback(\n    (month: number, year?: number): boolean => {\n      const now = new Date();\n      year = year || viewDate.getFullYear();\n      const minMonth = minDateTime ? minDateTime.getMonth() : 0;\n      const maxMonth = maxDateTime ? maxDateTime.getMonth() : 11;\n      const minYear = minDateTime?.getFullYear() || DEFAULT_MIN_YEAR;\n      const maxYear = maxDateTime?.getFullYear() || DEFAULT_MAX_YEAR;\n\n      let isDisabled =\n        year >= minYear && year <= maxYear\n          ? (year === minYear && minMonth > month) || (year === maxYear && month > maxMonth)\n          : true;\n\n      if (disableFuture) {\n        isDisabled =\n          isDisabled ||\n          (year === now.getFullYear() ? month > now.getMonth() : year > now.getFullYear());\n      }\n      if (disablePast) {\n        isDisabled =\n          isDisabled ||\n          (year === now.getFullYear() ? month < now.getMonth() : year < now.getFullYear());\n      }\n\n      return isDisabled;\n    },\n    [disableFuture, disablePast, viewDate, minDateTime, maxDateTime],\n  );\n\n  const isYearDisabled = React.useCallback(\n    (year: number): boolean => {\n      const now = new Date();\n      const minYear = minDateTime?.getFullYear() || DEFAULT_MIN_YEAR;\n      const maxYear = maxDateTime?.getFullYear() || DEFAULT_MAX_YEAR;\n\n      let isDisabled = minYear > year || year > maxYear;\n      if (disableFuture) {\n        isDisabled = isDisabled || year > now.getFullYear();\n      }\n      if (disablePast) {\n        isDisabled = isDisabled || year < now.getFullYear();\n      }\n\n      return isDisabled;\n    },\n    [disableFuture, disablePast, minDateTime, maxDateTime],\n  );\n\n  const resetSelectedDay = React.useCallback(() => {\n    setFocusedDay(undefined);\n  }, [setFocusedDay]);\n\n  return {\n    viewDate,\n    setViewDate: handleSetViewDate,\n    setPrevMonth,\n    setNextMonth,\n    focusedDay,\n    setFocusedDay,\n    isDayFocused,\n    isDayDisabled,\n    resetSelectedDay,\n    isMonthDisabled,\n    isYearDisabled,\n  };\n}\n"],"names":["React","addMonths","endOfDay","isAfter","isBefore","isSameDay","startOfDay","subMonths","DEFAULT_MAX_YEAR","DEFAULT_MIN_YEAR","isDayMinMaxRestricted","useCalendar","value","disablePast","disableFuture","shouldDisableDate","onHeaderChange","onNextMonth","onPrevMonth","minDateTime","maxDateTime","Array","viewDate","setViewDate","useState","isArray","Date","focusedDay","setFocusedDay","setPrevMonth","useCallback","setNextMonth","handleSetViewDate","isDayFocused","day","Boolean","isDayDisabled","withTime","now","min","max","isMonthDisabled","month","year","getFullYear","minMonth","getMonth","maxMonth","minYear","maxYear","isDisabled","isYearDisabled","resetSelectedDay","undefined"],"mappings":"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"}