{"version":3,"sources":["../../../src/hooks/useCalendar.ts"],"sourcesContent":["import * as React from 'react';\nimport { addMonths, endOfDay, isAfter, isBefore, isSameDay, startOfDay, subMonths } from 'date-fns';\nimport type { CalendarProps } from '../components/Calendar/Calendar';\nimport { DEFAULT_MAX_YEAR, DEFAULT_MIN_YEAR, isDayMinMaxRestricted } from '../lib/calendar';\n\nexport interface UseCalendarDependencies\n  extends Pick<\n    CalendarProps,\n    | 'onHeaderChange'\n    | 'onNextMonth'\n    | 'onPrevMonth'\n    | 'minDateTime'\n    | 'maxDateTime'\n    | 'shouldDisableDate'\n    | 'disableFuture'\n    | 'disablePast'\n  > {\n  value?: Array<Date | null> | Date;\n}\n\nexport function useCalendar({\n  value,\n  disablePast,\n  disableFuture,\n  shouldDisableDate,\n  onHeaderChange,\n  onNextMonth,\n  onPrevMonth,\n  minDateTime,\n  maxDateTime,\n}: UseCalendarDependencies): {\n  viewDate: Date;\n  setViewDate: (value: Date) => void;\n  setPrevMonth: () => void;\n  setNextMonth: () => void;\n  focusedDay: Date | undefined;\n  setFocusedDay: React.Dispatch<React.SetStateAction<Date | undefined>>;\n  isDayFocused: (day: Date) => boolean;\n  isDayDisabled: (day: Date, withTime?: boolean) => boolean;\n  resetSelectedDay: () => void;\n  isMonthDisabled: (month: number, year?: number) => boolean;\n  isYearDisabled: (year: number) => boolean;\n} {\n  const [viewDate, setViewDate] = React.useState(\n    (Array.isArray(value) ? value[0] : value) ?? new Date(),\n  );\n  const [focusedDay, setFocusedDay] = React.useState<Date>();\n\n  const setPrevMonth = React.useCallback(() => {\n    onPrevMonth?.();\n    setViewDate(subMonths(viewDate, 1));\n  }, [viewDate, onPrevMonth]);\n  const setNextMonth = React.useCallback(() => {\n    onNextMonth?.();\n    setViewDate(addMonths(viewDate, 1));\n  }, [viewDate, onNextMonth]);\n\n  const handleSetViewDate = React.useCallback(\n    (value: Date) => {\n      onHeaderChange?.(value);\n      setViewDate(value);\n    },\n    [onHeaderChange],\n  );\n\n  const isDayFocused = React.useCallback(\n    (day: Date) => Boolean(focusedDay && isSameDay(day, focusedDay)),\n    [focusedDay],\n  );\n\n  const isDayDisabled = React.useCallback(\n    (day: Date, withTime?: boolean) => {\n      const now = new Date();\n      if (shouldDisableDate) {\n        return shouldDisableDate(day);\n      }\n      if (disableFuture) {\n        return isAfter(startOfDay(day), now);\n      }\n      if (disablePast) {\n        return isBefore(endOfDay(day), now);\n      }\n      if (minDateTime || maxDateTime) {\n        return isDayMinMaxRestricted(day, { min: minDateTime, max: maxDateTime, withTime });\n      }\n\n      return false;\n    },\n    [disableFuture, disablePast, shouldDisableDate, minDateTime, maxDateTime],\n  );\n\n  const isMonthDisabled = React.useCallback(\n    (month: number, year?: number): boolean => {\n      const now = new Date();\n      year = year || viewDate.getFullYear();\n      const minMonth = minDateTime ? minDateTime.getMonth() : 0;\n      const maxMonth = maxDateTime ? maxDateTime.getMonth() : 11;\n      const minYear = minDateTime?.getFullYear() || DEFAULT_MIN_YEAR;\n      const maxYear = maxDateTime?.getFullYear() || DEFAULT_MAX_YEAR;\n\n      let isDisabled =\n        year >= minYear && year <= maxYear\n          ? (year === minYear && minMonth > month) || (year === maxYear && month > maxMonth)\n          : true;\n\n      if (disableFuture) {\n        isDisabled =\n          isDisabled ||\n          (year === now.getFullYear() ? month > now.getMonth() : year > now.getFullYear());\n      }\n      if (disablePast) {\n        isDisabled =\n          isDisabled ||\n          (year === now.getFullYear() ? month < now.getMonth() : year < now.getFullYear());\n      }\n\n      return isDisabled;\n    },\n    [disableFuture, disablePast, viewDate, minDateTime, maxDateTime],\n  );\n\n  const isYearDisabled = React.useCallback(\n    (year: number): boolean => {\n      const now = new Date();\n      const minYear = minDateTime?.getFullYear() || DEFAULT_MIN_YEAR;\n      const maxYear = maxDateTime?.getFullYear() || DEFAULT_MAX_YEAR;\n\n      let isDisabled = minYear > year || year > maxYear;\n      if (disableFuture) {\n        isDisabled = isDisabled || year > now.getFullYear();\n      }\n      if (disablePast) {\n        isDisabled = isDisabled || year < now.getFullYear();\n      }\n\n      return isDisabled;\n    },\n    [disableFuture, disablePast, minDateTime, maxDateTime],\n  );\n\n  const resetSelectedDay = React.useCallback(() => {\n    setFocusedDay(undefined);\n  }, [setFocusedDay]);\n\n  return {\n    viewDate,\n    setViewDate: handleSetViewDate,\n    setPrevMonth,\n    setNextMonth,\n    focusedDay,\n    setFocusedDay,\n    isDayFocused,\n    isDayDisabled,\n    resetSelectedDay,\n    isMonthDisabled,\n    isYearDisabled,\n  };\n}\n"],"names":["useCalendar","value","disablePast","disableFuture","shouldDisableDate","onHeaderChange","onNextMonth","onPrevMonth","minDateTime","maxDateTime","Array","viewDate","setViewDate","React","useState","isArray","Date","focusedDay","setFocusedDay","setPrevMonth","useCallback","subMonths","setNextMonth","addMonths","handleSetViewDate","isDayFocused","day","Boolean","isSameDay","isDayDisabled","withTime","now","isAfter","startOfDay","isBefore","endOfDay","isDayMinMaxRestricted","min","max","isMonthDisabled","month","year","getFullYear","minMonth","getMonth","maxMonth","minYear","DEFAULT_MIN_YEAR","maxYear","DEFAULT_MAX_YEAR","isDisabled","isYearDisabled","resetSelectedDay","undefined"],"mappings":"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"}