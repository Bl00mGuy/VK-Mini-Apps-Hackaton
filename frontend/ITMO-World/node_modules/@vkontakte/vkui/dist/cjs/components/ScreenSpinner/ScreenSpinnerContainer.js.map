{"version":3,"sources":["../../../../src/components/ScreenSpinner/ScreenSpinnerContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport type { HTMLAttributesWithRootRef } from '../../types';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Footnote } from '../Typography/Footnote/Footnote';\nimport { ScreenSpinnerContext } from './context';\nimport { type ScreenSpinnerProps } from './types';\nimport styles from './ScreenSpinner.module.css';\n\nconst stateClassNames = {\n  cancelable: styles['ScreenSpinner--state-cancelable'],\n  done: styles['ScreenSpinner--state-done'],\n  error: styles['ScreenSpinner--state-error'],\n};\n\nconst modeClassNames = {\n  shadow: styles['ScreenSpinner--mode-shadow'],\n  overlay: styles['ScreenSpinner--mode-overlay'],\n};\n\ntype ScreenSpinnerContainerProps = HTMLAttributesWithRootRef<HTMLSpanElement> &\n  Pick<ScreenSpinnerProps, 'state' | 'mode' | 'caption'>;\n\nexport const ScreenSpinnerContainer: React.FC<ScreenSpinnerContainerProps> = ({\n  state = 'loading',\n  mode = 'shadow',\n  caption,\n  children,\n  ...restProps\n}: ScreenSpinnerContainerProps) => {\n  return (\n    <ScreenSpinnerContext.Provider value={{ state, caption }}>\n      <RootComponent\n        baseClassName={classNames(\n          styles['ScreenSpinner'],\n          modeClassNames[mode],\n          state !== 'loading' && stateClassNames[state],\n          hasReactNode(caption) && styles['ScreenSpinner--has-caption'],\n        )}\n        {...restProps}\n      >\n        <div className={styles['ScreenSpinner__icon-slot']}>{children}</div>\n        {hasReactNode(caption) && (\n          <Footnote className={styles.ScreenSpinner__caption} aria-hidden>\n            {caption}\n          </Footnote>\n        )}\n      </RootComponent>\n    </ScreenSpinnerContext.Provider>\n  );\n};\n\nScreenSpinnerContainer.displayName = 'ScreenSpinnerContainer';\n"],"names":["ScreenSpinnerContainer","stateClassNames","cancelable","done","error","modeClassNames","shadow","overlay","state","mode","caption","children","restProps","ScreenSpinnerContext","Provider","value","RootComponent","baseClassName","classNames","hasReactNode","div","className","Footnote","aria-hidden","displayName"],"mappings":";;;;+BAuBaA;;;eAAAA;;;;;;;;iEAvBU;sBACkB;+BAEX;0BACL;yBACY;AAIrC,MAAMC,kBAAkB;IACtBC,UAAU;IACVC,IAAI;IACJC,KAAK;AACP;AAEA,MAAMC,iBAAiB;IACrBC,MAAM;IACNC,OAAO;AACT;AAKO,MAAMP,yBAAgE;QAAC,EAC5EQ,QAAQ,SAAS,EACjBC,OAAO,QAAQ,EACfC,OAAO,EACPC,QAAQ,EAEoB,WADzBC;QAJHJ;QACAC;QACAC;QACAC;;IAGA,qBACE,qBAACE,6BAAoB,CAACC,QAAQ;QAACC,OAAO;YAAEP;YAAOE;QAAQ;kBACrD,cAAA,sBAACM,4BAAa;YACZC,eAAeC,IAAAA,gBAAU,uBAEvBb,cAAc,CAACI,KAAK,EACpBD,UAAU,aAAaP,eAAe,CAACO,MAAM,EAC7CW,IAAAA,kBAAY,EAACT;WAEXE;;8BAEJ,qBAACQ;oBAAIC,SAAS;8BAAuCV;;gBACpDQ,IAAAA,kBAAY,EAACT,0BACZ,qBAACY,kBAAQ;oBAACD,SAAS;oBAAiCE,aAAW;8BAC5Db;;;;;AAMb;AAEAV,uBAAuBwB,WAAW,GAAG"}