{"version":3,"sources":["../../../../../src/components/Pagination/PaginationPage/PaginationPageButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { type SizeTypeValues } from '../../../lib/adaptivity';\nimport { Tappable, type TappableProps } from '../../Tappable/Tappable';\nimport { Text } from '../../Typography/Text/Text';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport type { PaginationProps } from '../Pagination';\nimport { getPageLabelDefault } from '../utils';\nimport { getPaginationPageClassNames } from './usePaginationPageClasses';\nimport styles from './PaginationPage.module.css';\n\nexport interface PaginationPageButtonOpts\n  extends Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'disabled' | 'className'>,\n    Pick<PaginationProps, 'getPageLabel'> {\n  isCurrent?: boolean;\n  sizeY?: SizeTypeValues;\n  children: number;\n}\n\nexport interface PaginationPageButtonProps extends PaginationPageButtonOpts {\n  renderPageButton?: (props: CustomPaginationPageButtonProps) => React.ReactNode;\n}\n\nconst getTappablePropsFromPaginationPage = (\n  opts: PaginationPageButtonOpts,\n): TappableProps & { 'data-page': number } => {\n  const {\n    isCurrent = false,\n    getPageLabel = getPageLabelDefault,\n    children,\n    className,\n    disabled,\n    sizeY,\n    ...restProps\n  } = opts;\n\n  const pageClassNames = getPaginationPageClassNames({\n    isCurrent,\n    disabled,\n    sizeY,\n  });\n\n  return {\n    'className': classNames(pageClassNames, className),\n    'activeMode': styles['PaginationPage--state-active'],\n    'hoverMode': styles['PaginationPage--state-hover'],\n    'focusVisibleMode': 'outside',\n    'aria-current': isCurrent ? true : undefined,\n    'disabled': disabled,\n    'children': (\n      <Text normalize={false}>\n        <VisuallyHidden>{getPageLabel(isCurrent)} </VisuallyHidden>\n        {children}\n      </Text>\n    ),\n    'data-page': children,\n    ...restProps,\n  };\n};\n\nexport type CustomPaginationPageButtonProps = ReturnType<typeof getTappablePropsFromPaginationPage>;\n\nexport const PaginationPageButton = ({\n  renderPageButton,\n  ...restProps\n}: PaginationPageButtonProps): React.ReactNode => {\n  const tappableProps = getTappablePropsFromPaginationPage(restProps);\n\n  if (typeof renderPageButton === 'function') {\n    return renderPageButton(tappableProps);\n  }\n\n  return <Tappable {...tappableProps} />;\n};\n"],"names":["PaginationPageButton","getTappablePropsFromPaginationPage","opts","isCurrent","getPageLabel","getPageLabelDefault","children","className","disabled","sizeY","restProps","pageClassNames","getPaginationPageClassNames","classNames","undefined","Text","normalize","VisuallyHidden","renderPageButton","tappableProps","Tappable"],"mappings":";;;;+BA8DaA;;;eAAAA;;;;;;;iEA9DU;sBACI;0BAEkB;sBACxB;gCACU;uBAEK;0CACQ;AAe5C,MAAMC,qCAAqC,CACzCC;IAEA,MAAM,EACJC,YAAY,KAAK,EACjBC,eAAeC,0BAAmB,EAClCC,QAAQ,EACRC,SAAS,EACTC,QAAQ,EACRC,KAAK,EAEN,GAAGP,MADCQ,yCACDR;QAPFC;QACAC;QACAE;QACAC;QACAC;QACAC;;IAIF,MAAME,iBAAiBC,IAAAA,qDAA2B,EAAC;QACjDT;QACAK;QACAC;IACF;IAEA,OAAO;QACL,aAAaI,IAAAA,gBAAU,EAACF,gBAAgBJ;QACxC,YAAY;QACZ,WAAW;QACX,oBAAoB;QACpB,gBAAgBJ,YAAY,OAAOW;QACnC,YAAYN;QACZ,0BACE,sBAACO,UAAI;YAACC,WAAW;;8BACf,sBAACC,8BAAc;;wBAAEb,aAAaD;wBAAW;;;gBACxCG;;;QAGL,aAAaA;OACVI;AAEP;AAIO,MAAMV,uBAAuB;QAAC,EACnCkB,gBAAgB,EAEU,WADvBR;QADHQ;;IAGA,MAAMC,gBAAgBlB,mCAAmCS;IAEzD,IAAI,OAAOQ,qBAAqB,YAAY;QAC1C,OAAOA,iBAAiBC;IAC1B;IAEA,qBAAO,qBAACC,kBAAQ,uBAAKD;AACvB"}