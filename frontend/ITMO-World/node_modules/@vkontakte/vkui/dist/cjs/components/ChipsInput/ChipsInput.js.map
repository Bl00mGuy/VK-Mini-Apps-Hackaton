{"version":3,"sources":["../../../../src/components/ChipsInput/ChipsInput.tsx"],"sourcesContent":["import { useExternRef } from '../../hooks/useExternRef';\nimport { ChipsInputBase } from '../ChipsInputBase/ChipsInputBase';\nimport type { ChipOption, ChipsInputBaseProps } from '../ChipsInputBase/types';\nimport type { FormFieldProps } from '../FormField/FormField';\nimport { useChipsInput, type UseChipsInputProps } from './useChipsInput';\n\nexport interface ChipsInputProps<Option extends ChipOption>\n  extends ChipsInputBaseProps<Option>,\n    UseChipsInputProps<Option>,\n    Pick<FormFieldProps, 'status' | 'mode' | 'before' | 'after'> {\n  /**\n   * Если `true`, то справа будет отображаться кнопка для очистки значения\n   */\n  allowClearButton?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ChipsInput\n */\nexport const ChipsInput = <Option extends ChipOption>({\n  // option\n  value: valueProp,\n  defaultValue,\n  onChange,\n\n  // input\n  getRef,\n  inputValue: inputValueProp,\n  defaultInputValue: inputDefaultValueProp,\n  onInputChange: onInputChangeProp,\n  getOptionValue,\n  getOptionLabel,\n  getNewOptionData,\n\n  // other\n  disabled,\n  allowClearButton,\n  ...restProps\n}: ChipsInputProps<Option>): React.ReactNode => {\n  const {\n    value,\n    addOptionFromInput,\n    removeOption,\n    clearOptions,\n\n    // input\n    inputRef: inputRefHook,\n    inputValue,\n    onInputChange,\n  } = useChipsInput({\n    // option\n    value: valueProp,\n    defaultValue,\n    onChange,\n    getOptionLabel,\n    getOptionValue,\n    getNewOptionData,\n\n    // input\n    inputValue: inputValueProp,\n    defaultInputValue: inputDefaultValueProp,\n    onInputChange: onInputChangeProp,\n\n    // other\n    disabled,\n  });\n  const inputRef = useExternRef(getRef, inputRefHook);\n\n  return (\n    <ChipsInputBase\n      {...restProps}\n      disabled={disabled}\n      value={value}\n      clearButtonShown={allowClearButton && (!!value.length || !!inputValue.length)}\n      onAddChipOption={addOptionFromInput}\n      onRemoveChipOption={removeOption}\n      onClear={clearOptions}\n      getRef={inputRef}\n      inputValue={inputValue}\n      onInputChange={onInputChange}\n    />\n  );\n};\n"],"names":["ChipsInput","value","valueProp","defaultValue","onChange","getRef","inputValue","inputValueProp","defaultInputValue","inputDefaultValueProp","onInputChange","onInputChangeProp","getOptionValue","getOptionLabel","getNewOptionData","disabled","allowClearButton","restProps","addOptionFromInput","removeOption","clearOptions","inputRef","inputRefHook","useChipsInput","useExternRef","ChipsInputBase","clearButtonShown","length","onAddChipOption","onRemoveChipOption","onClear"],"mappings":";;;;+BAmBaA;;;eAAAA;;;;;;;8BAnBgB;gCACE;+BAGwB;AAehD,MAAMA,aAAa;QAA4B,EACpD,SAAS;IACTC,OAAOC,SAAS,EAChBC,YAAY,EACZC,QAAQ,EAER,QAAQ;IACRC,MAAM,EACNC,YAAYC,cAAc,EAC1BC,mBAAmBC,qBAAqB,EACxCC,eAAeC,iBAAiB,EAChCC,cAAc,EACdC,cAAc,EACdC,gBAAgB,EAEhB,QAAQ;IACRC,QAAQ,EACRC,gBAAgB,EAEQ,WADrBC;QAhBHhB;QACAE;QACAC;QAGAC;QACAC;QACAE;QACAE;QACAE;QACAC;QACAC;QAGAC;QACAC;;IAGA,MAAM,EACJf,KAAK,EACLiB,kBAAkB,EAClBC,YAAY,EACZC,YAAY,EAEZ,QAAQ;IACRC,UAAUC,YAAY,EACtBhB,UAAU,EACVI,aAAa,EACd,GAAGa,IAAAA,4BAAa,EAAC;QAChB,SAAS;QACTtB,OAAOC;QACPC;QACAC;QACAS;QACAD;QACAE;QAEA,QAAQ;QACRR,YAAYC;QACZC,mBAAmBC;QACnBC,eAAeC;QAEf,QAAQ;QACRI;IACF;IACA,MAAMM,WAAWG,IAAAA,0BAAY,EAACnB,QAAQiB;IAEtC,qBACE,qBAACG,8BAAc,8CACTR;QACJF,UAAUA;QACVd,OAAOA;QACPyB,kBAAkBV,oBAAqB,CAAA,CAAC,CAACf,MAAM0B,MAAM,IAAI,CAAC,CAACrB,WAAWqB,MAAM,AAAD;QAC3EC,iBAAiBV;QACjBW,oBAAoBV;QACpBW,SAASV;QACTf,QAAQgB;QACRf,YAAYA;QACZI,eAAeA;;AAGrB"}