import * as React from 'react';
import type { HasComponent, HTMLAttributesWithRootRef } from '../../types';
import { type CustomPaginationNavigationButton, type PaginationNavigationButtonProps } from './PaginationNavigationButton/PaginationNavigationButton';
import { type CustomPaginationPageButtonProps } from './PaginationPage/PaginationPageButton';
export interface PaginationProps extends Omit<HTMLAttributesWithRootRef<HTMLElement>, 'onChange'> {
    /**
     * Текущая страница.
     */
    currentPage?: number;
    /**
     * Кол-во всегда видимых страниц по краям текущей страницы.
     */
    siblingCount?: number;
    /**
     * Кол-во всегда видимых страниц в начале и в конце.
     */
    boundaryCount?: number;
    /**
     * Общее кол-во страниц.
     */
    totalPages?: number;
    /**
     * Блокировка всех кнопок.
     */
    disabled?: boolean;
    /**
     * Декоративный текст для кнопки навигации назад.
     *
     * > Note: Экранные дикторы будут использовать `prevButtonLabel`.
     */
    prevButtonCaption?: string;
    /**
     * Декоративный текст для кнопки навигации вперёд.
     *
     * > Note: Экранные дикторы будут использовать `nextButtonLabel`.
     */
    nextButtonCaption?: string;
    /**
     * Задаёт стиль отображения кнопок навигации.
     *
     * - `icon` – показывать только иконку;
     * - `caption` – показывать только подпись;
     * - `both` – показывать и иконку, и подпись.
     */
    navigationButtonsStyle?: PaginationNavigationButtonProps['style'];
    /**
     * [a11y] Метка для обозначения блока навигации.
     */
    navigationLabel?: string;
    navigationLabelComponent?: HasComponent['Component'];
    /**
     * [a11y] Метка для кнопки навигации назад.
     */
    prevButtonLabel?: string;
    /**
     * [a11y] Метка для кнопки навигации вперёд.
     */
    nextButtonLabel?: string;
    /**
     * [a11y] Функция для переопределения и/или локализации метки кнопки страницы.
     */
    getPageLabel?: (isCurrent: boolean) => string;
    onChange?: (page: number, event: React.MouseEvent<HTMLElement>) => void;
    /**
     * Функция для кастомного рендера кнопок страниц.
     *
     * > Note: `CustomPaginationPageButtonProps` наследует API [Tappable](https://vkcom.github.io/VKUI/#/Tappable).
     */
    renderPageButton?: (props: CustomPaginationPageButtonProps) => React.ReactNode;
    /**
     Функция для кастомного рендера кнопок навигации `prev` и `next`.
     *
     * > Note: `CustomPaginationNavigationButton` наследует API [Button](https://vkcom.github.io/VKUI/#/Button).
     */
    renderNavigationButton?: (props: CustomPaginationNavigationButton) => React.ReactNode;
}
/**
 * @see https://vkcom.github.io/VKUI/#/Pagination
 */
export declare const Pagination: ({ currentPage, siblingCount, boundaryCount, totalPages, disabled, prevButtonCaption, nextButtonCaption, navigationButtonsStyle, getPageLabel, navigationLabel, navigationLabelComponent, prevButtonLabel, nextButtonLabel, onChange, renderPageButton, renderNavigationButton, ...resetProps }: PaginationProps) => React.ReactNode;
//# sourceMappingURL=Pagination.d.ts.map