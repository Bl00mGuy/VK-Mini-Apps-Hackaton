import type { ArrowOptions, Placement, PlacementWithAuto, UseFloatingMiddleware } from '../types/common';
export interface UseFloatingMiddlewaresBootstrapOptions {
    /**
     * По умолчанию компонент выберет наилучшее расположение сам, но приоритетное можно задать с помощью этого свойства.
     */
    placement?: PlacementWithAuto;
    /**
     * Указанное значение `placement` форсируется, даже если для выпадающего элемента недостаточно места.
     * Не оказывает влияния при `placement` значениях - `'auto' | 'auto-start' | 'auto-end'`
     */
    disableFlipMiddleware?: boolean;
    /**
     * Отступ по главной оси.
     */
    offsetByMainAxis?: number;
    /**
     * Отступ по вспомогательной оси.
     */
    offsetByCrossAxis?: number;
    arrowRef?: ArrowOptions['element'];
    /**
     * Отображать ли стрелку, указывающую на якорный элемент.
     */
    arrow?: boolean;
    /**
     * Высота стрелки. Складывается с `mainAxis`, чтобы стрелка не залезала на якорный элемент.
     */
    arrowHeight?: number;
    /**
     * Безопасная зона вокруг стрелки, чтобы та не выходила за края контента.
     */
    arrowPadding?: number;
    /**
     * Выставлять ширину равной target элементу.
     */
    sameWidth?: boolean;
    /**
     * Массив кастомных модификаторов для Popper (необходимо мемоизировать).
     */
    customMiddlewares?: UseFloatingMiddleware[];
    /**
     * Принудительно скрывает компонент если целевой элемент вышел за область видимости.
     */
    hideWhenReferenceHidden?: boolean;
}
export declare const useFloatingMiddlewaresBootstrap: ({ placement, arrowRef, arrow, arrowHeight, arrowPadding, sameWidth, offsetByMainAxis, offsetByCrossAxis, customMiddlewares, hideWhenReferenceHidden, disableFlipMiddleware, }: UseFloatingMiddlewaresBootstrapOptions) => {
    middlewares: UseFloatingMiddleware[];
    strictPlacement: Placement | undefined;
};
//# sourceMappingURL=index.d.ts.map