import * as React from 'react';
import type { HTMLAttributesWithRootRef } from '../../types';
type ArrowMonthProps = Omit<React.AllHTMLAttributes<HTMLElement>, 'onClick' | 'aria-label'>;
export interface CalendarHeaderProps extends Omit<HTMLAttributesWithRootRef<HTMLDivElement>, 'onChange'> {
    viewDate: Date;
    /**
     * Скрывает иконку для переключения на предыдущий месяц
     */
    prevMonthHidden?: boolean;
    /**
     * Скрывает иконку для переключения на следующий месяц
     */
    nextMonthHidden?: boolean;
    disablePickers?: boolean;
    prevMonthLabel?: string;
    nextMonthLabel?: string;
    changeMonthLabel?: string;
    changeYearLabel?: string;
    prevMonthIcon?: React.ReactNode;
    nextMonthIcon?: React.ReactNode;
    prevMonthProps?: ArrowMonthProps;
    nextMonthProps?: ArrowMonthProps;
    isMonthDisabled?: (monthNumber: number, year?: number) => boolean;
    isYearDisabled?: (yearNumber: number) => boolean;
    onChange: (viewDate: Date) => void;
    /**
     * Нажатие на кнопку переключения на следующий месяц.
     */
    onNextMonth?: () => void;
    /**
     * Нажатие на кнопку переключения на предыдущий месяц.
     */
    onPrevMonth?: () => void;
}
export declare const CalendarHeader: ({ viewDate, onChange, prevMonthHidden: prevMonthHiddenProp, nextMonthHidden: nextMonthHiddenProp, disablePickers, onNextMonth, onPrevMonth, prevMonthProps, nextMonthProps, prevMonthLabel, nextMonthLabel, changeMonthLabel, changeYearLabel, prevMonthIcon, nextMonthIcon, isMonthDisabled, isYearDisabled, ...restProps }: CalendarHeaderProps) => React.ReactNode;
export {};
//# sourceMappingURL=CalendarHeader.d.ts.map