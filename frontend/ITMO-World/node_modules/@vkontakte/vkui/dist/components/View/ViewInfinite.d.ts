import * as React from 'react';
import { type NavIdProps } from '../../lib/getNavId';
import type { HasPlatform, HTMLAttributesWithRootRef } from '../../types';
import { type ScrollContextInterface } from '../AppRoot/ScrollContext';
import { type ConfigProviderContextInterface } from '../ConfigProvider/ConfigProviderContext';
import { type SplitColContextProps } from '../SplitCol/SplitColContext';
interface Scrolls {
    [index: string]: Array<number | undefined>;
}
interface ViewsScrolls {
    [index: string]: Scrolls;
}
export declare let scrollsCache: ViewsScrolls;
export type TransitionParams = {
    from: string | null;
    to: string | null;
};
export interface ViewInfiniteProps extends HTMLAttributesWithRootRef<HTMLElement>, HasPlatform, NavIdProps {
    activePanel: string;
    onTransition?: (params: TransitionParams & {
        isBack: boolean;
    }) => void;
    /**
     * callback свайпа назад
     */
    onSwipeBack?: () => void;
    /**
     * callback начала анимации свайпа назад.
     */
    onSwipeBackStart?: (activePanel: string | null) => void | 'prevent';
    /**
     * callback завершения анимации отмененного пользователем свайпа
     */
    onSwipeBackCancel?: () => void;
    history?: string[];
    isBackCheck?: (params: TransitionParams) => boolean;
    /**
     * @ignore
     */
    splitCol?: SplitColContextProps;
    /**
     * @ignore
     */
    configProvider?: ConfigProviderContextInterface;
    /**
     * @ignore
     */
    scroll?: ScrollContextInterface;
}
export interface ViewInfiniteState {
    animated: boolean;
    visiblePanels: Array<string | null>;
    activePanel: string | null;
    isBack?: boolean;
    prevPanel: string | null;
    nextPanel: string | null;
    swipingBack?: boolean;
    swipeBackStartX: number;
    swipeBackShift: number;
    swipeBackNextPanel: string | null;
    swipeBackPrevPanel: string | null;
    swipeBackResult: 'success' | 'fail' | null;
    browserSwipe: boolean;
}
export declare const ViewInfinite: React.FC<ViewInfiniteProps>;
export {};
//# sourceMappingURL=ViewInfinite.d.ts.map